name: Java CI/CD with Maven, Docker, and ECS Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: backend-studio-ghibli-ecr-repo
  ECS_SERVICE: backend-studio-ghibli-ecs-service-task
  ECS_CLUSTER: studio-ghibli-ecs-cluster
  CONTAINER_NAME: backend-studio-ghibli-container
  ECS_TASK_DEFINITION: app-task-definition.json # set this to the path to your Amazon ECS task definition

jobs:
  sonar-cloud-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build and SonarCloud analysis
      run: mvn -B verify sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=studioghibli2023_backend -Dsonar.organization=studioghibli2023 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

#
  codeql-analysis:
    needs: sonar-cloud-test
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # This can be 'temurin', 'adopt', or 'zulu'
          cache: maven

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java

      - name: Build with Maven
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true -Dmaven.javadoc.skip=true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
#

  build:
    needs: sonar-cloud-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: target/*.jar

  docker-build-and-push:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
      image_uri: ${{ steps.build-image.outputs.image_uri }}
    steps:
    - uses: actions/checkout@v3
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: my-artifact
        path: target
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      run: |
        ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        IMAGE_TAG=${{ github.sha }}
        IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "::set-output name=image_uri::$IMAGE_URI"
    - name: Set IMAGE_TAG output
      id: set-image-tag
      run: echo "::set-output name=image_tag::${{ github.sha }}"


  update-ecs-service:
    needs: [docker-build-and-push] # Ensures this job runs after the docker-build-and-push job
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3 # Checks out your repository to access the ECS task definition file

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Echo Image URI
      run: |
       echo "Image URI: ${{ needs.docker-build-and-push.outputs.image_uri }}"

    - name: Render Amazon ECS task definition
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.docker-build-and-push.outputs.image_uri }} # Uses the image URI output from the docker-build-and-push job

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

      #  ------------------------------------- Trivy vulnerability scan  -------------------------------------
  trivy-security-scan:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Echo the constructed image reference
        run: echo "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

      - name: Install and run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ needs.docker-build-and-push.outputs.image_tag }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'

      #  ------------------------------------- Trivy vulnerability scan end------------------------------------ 

           
  run-post-man-integration:
    needs: update-ecs-service
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v3
     - name: Run Postman Tests
       run: newman run "StudioGhibli20233 - Backend.postman_collection.json"
