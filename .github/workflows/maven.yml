# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
# Sonarcloud Automatic Analysis is turned off so that the analysis will be part of the pipeline

env:
  AWS_REGION: us-east-1                   #set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: backend-studio-ghibli-ecr-repo           # set this to your Amazon ECR repository name
  ECS_SERVICE: backend-studio-ghibli-ecs-service-task                 # set this to your Amazon ECS service name
  ECS_CLUSTER: studio-ghibli-ecs-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: app-task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: backend-studio-ghibli-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

#  ------------------------------------- 
      # SonarCloud analysis step
#    - name: Build and SonarCloud analysis
#      run: mvn -B verify sonar:sonar -Dsonar.projectKey=studioghibli2023_backend -Dsonar.organization=studioghibli2023 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

# SonarCloud analysis step - the below step has the qualitygate.wait=true parameter added to make the deployment fail if there are errors exceeds the quality gate set in Sonarcloud
    - name: Build and SonarCloud analysis
      run: mvn -B verify sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=studioghibli2023_backend -Dsonar.organization=studioghibli2023 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

 # -------------------------------------
  
     
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

  
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        
      run: | # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
      #  ------------------------------------- Trivy vulnerability scan  -------------------------------------
    - name: Echo the constructed image reference
      run: echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}


    - name: Install and run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      
      with:
        image-ref: '${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        severity: 'HIGH,CRITICAL'


      #  ------------------------------------- Trivy vulnerability scan end------------------------------------
      
    - name: Push image to Amazon ECR
      run: |  
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        #Deploy to ECS Fargate
  
     
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
